# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: concierge
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-python-requirements
  - serverless-step-functions
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: python3.7

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

  # you can define service wide environment variables here
  environment:
    DROPBOX_ROOT_FOLDER: ${ssm:dropboxRootFolder}
    DROPBOX_ACCESS_TOKEN: ${ssm:dropboxAccessToken}
    IFQ_USERNAME: ${ssm:ifqUsername}
    IFQ_PASSWORD: ${ssm:ifqPassword}

# you can add packaging information here
package:
 include:
   - app/**
   - functions/**
 exclude:
   - "**"

custom:
  pythonRequirements:
    dockerizePip: non-linux

functions:
  check-if-downloaded:
    handler: functions/check-if-downloaded/check.handler
  download-from-ifq:
    handler: functions/download-from-ifq/download.handler
    timeout: 30 # download a 8M file from the IFQ site may require some time ..
  publish-to-dropbox:
    handler: functions/publish-to-dropbox/publish.handler

stepFunctions:
  stateMachines:
    ifqdownload:
      name: IFQDownloadStateMachine
      definition:
        Comment: "Download a IFQ issue from the newpaper website"
        StartAt: CheckIfAlreadyDownloaded
        States:

          CheckIfAlreadyDownloaded:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-check-if-downloaded"
            Next: ChoiceState
          ChoiceState:
            Type: Choice
            Choices:
              - Variable: "$.exists"
                BooleanEquals: true
                Next: SuccessState
              - Variable: "$.exists"
                BooleanEquals: false
                Next: DownloadFromIfqState
            Default: DefaultState
          DefaultState:
            Type: Fail
            Cause: "No Matches!" 

          DownloadFromIfqState:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-download-from-ifq"
            Next: VerifyDownloadState
          VerifyDownloadState:
            Type: Choice
            Choices:
              - Variable: "$.available"
                BooleanEquals: true
                Next: SuccessState
              - Variable: "$.available"
                BooleanEquals: false
                Next: WaitState
            Default: DefaultState
            
          WaitState:
            Type: Wait
            Seconds: 900
            Next: DownloadFromIfqState

          SuccessState:
            Type: Succeed
      events:
        - schedule:
            rate: cron(0 4 * * ? *)
        - http:
            path: ifq/check-if-downloaded
            method: POST    


#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Outputs:
    IFQDownloadStateMachine:
      Description: The ARN of the example state machine
      Value:
        Ref: IFQDownloadStateMachine