# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: concierge
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-python-requirements
  - serverless-step-functions
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: python3.7
  logRetentionInDays: 30

  # you can overwrite defaults here
  stage: dev
  region: eu-west-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

  # you can define service wide environment variables here
  environment:
    LOG_LEVEL: INFO
    DROPBOX_ROOT_FOLDER: ${ssm:/concierge/dev/dropbox-root-folder}
    DROPBOX_ACCESS_TOKEN: ${ssm:/concierge/dev/dropbox-access-token}
    IFQ_USERNAME: ${ssm:/concierge/dev/ifq-username}
    IFQ_PASSWORD: ${ssm:/concierge/dev/ifq-password}
    SLACK_WEBHOOK_URL: ${ssm:/concierge/dev/slack-webhook-url}
    SLACK_SIGNING_SECRET: ${ssm:/concierge/dev/slack-signing-secret}
    TOGGL_API_TOKEN: ${ssm:/concierge/dev/toggl-api-token}
    TOGGL_USER_AGENT: ${ssm:/concierge/dev/toggl-user-agent}
    TOGGL_WORKSPACE_ID: ${ssm:/concierge/dev/toggl-workspace-id}

# you can add packaging information here
package:
 include:
   - app/**
 exclude:
   - "**"
 individually: false

custom:
  pythonRequirements:
    dockerizePip: non-linux

functions:

  run-slash-command:
    handler: app/entrypoints/aws_lambda.run_slash_command
    events:
      - http:
          path: v1/integrations/slack/slash-commands
          method: POST 

  run-scheduled:
    handler: app/entrypoints/aws_lambda.run_scheduled
    timeout: 30 # download a 8M file from the IFQ site may require some time ..
    events:
      - schedule:
          name: ${self:service}-${opt:stage, self:provider.stage}-toggl-summarize-previous-business-day
          rate: cron(30 6 ? * MON-SUN *)
          enabled: true
          input:
            Summarize:
              when: previous_business_day
      - schedule:
          name: ${self:service}-${opt:stage, self:provider.stage}-toggl-summarize-today
          rate: cron(30 16 ? * MON-SUN *)
          enabled: true
          input:
            Summarize:
              when: today
      - schedule:
          name: ${self:service}-${opt:stage, self:provider.stage}-refurbished-products
          rate: cron(00 6 ? * MON-SUN *)
          enabled: true
          input:
            CheckRefurbished:
              store: it
              products:
                - ipad
                - iphone
      - schedule:
          name: ${self:service}-${opt:stage, self:provider.stage}-download-ifq
          rate: cron(0 4 * * ? *)
          enabled: true
          input:
            DownloadIFQ:
              when: today
