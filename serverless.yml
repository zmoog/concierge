# Welcome to Concierge!

service: concierge

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-python-requirements
  # - serverless-step-functions

provider:
  name: aws
  runtime: python3.7
  logRetentionInDays: 30

  # you can overwrite defaults here
  stage: dev
  region: eu-west-1

  # you can add statements to the Lambda function's IAM Role here
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "SNS:Publish"
          Resource:
            - !Ref CommandTopic

  # you can define service wide environment variables here
  environment:
    LOG_LEVEL: INFO
    CLASSEVIVA_USERNAME: ${ssm:/concierge/${self:provider.stage}/classeviva-username}
    CLASSEVIVA_PASSWORD: ${ssm:/concierge/${self:provider.stage}/classeviva-password}
    DROPBOX_ROOT_FOLDER: ${ssm:/concierge/${self:provider.stage}/dropbox-root-folder}
    DROPBOX_ACCESS_TOKEN: ${ssm:/concierge/${self:provider.stage}/dropbox-access-token}
    IFQ_USERNAME: ${ssm:/concierge/${self:provider.stage}/ifq-username}
    IFQ_PASSWORD: ${ssm:/concierge/${self:provider.stage}/ifq-password}
    SLACK_WEBHOOK_URL: ${ssm:/concierge/${self:provider.stage}/slack-webhook-url}
    SLACK_SIGNING_SECRET: ${ssm:/concierge/${self:provider.stage}/slack-signing-secret}
    SNS_COMMANDS_TOPIC_ARN: "!Ref CommandTopic"
    TELEGRAM_TOKEN: ${ssm:/concierge/${self:provider.stage}/telegram-token}
    TELEGRAM_DEFAULT_GROUP_ID: ${ssm:/concierge/${self:provider.stage}/telegram-default-group-id}
    TOGGL_API_TOKEN: ${ssm:/concierge/${self:provider.stage}/toggl-api-token}
    TOGGL_USER_AGENT: ${ssm:/concierge/${self:provider.stage}/toggl-user-agent}
    TOGGL_WORKSPACE_ID: ${ssm:/concierge/${self:provider.stage}/toggl-workspace-id}


# you can add packaging information here
package:
  patterns:
    - 'app/**'
    - '!.github'
    - '!.tool-versions'
    - '!.vscode'
    - '!node_modules'
    - '!package*.json'
    - '!setenv*.sh'
    - '!tests'
    - '!venv'
  # All lambdas share the same internal framework, so
  # individually deploying them would end up in uploading
  # the very same function package multiple times.
  individually: false

custom:
  CommandsTopicName: ${self:service}-commands-topic-${self:provider.stage}
  pythonRequirements:
    dockerizePip: non-linux
    noDeploy:
      - boto3
      - botocore
      - setuptools

functions:

  dispatch-command:
    handler: app/entrypoints/aws/sns/message.dispatch_command
    events:
    - sns:
        arn: !Ref CommandTopic
        topicName: ${self:custom.CommandsTopicName}

  dispatch-slash-command:
    handler: app/entrypoints/aws/api_gateway/slash_commands.dispatch
    events:
      - http:
          path: v1/integrations/slack/slash-commands
          method: POST 

  run-scheduled:
    handler: app/entrypoints/aws/cloudwatch/events.run_scheduled
    timeout: 30 # download a 8M file from the IFQ site may require some time ..
    events:
      - schedule:
          name: ${self:service}-${opt:stage, self:provider.stage}-toggl-summarize-previous-business-day
          rate: cron(30 6 ? * MON-SUN *)
          enabled: false
          input:
            Summarize:
              when: previous_business_day
      - schedule:
          name: ${self:service}-${opt:stage, self:provider.stage}-toggl-summarize-today
          rate: cron(30 16 ? * MON-SUN *)
          enabled: false
          input:
            Summarize:
              when: today
      - schedule:
          name: ${self:service}-${opt:stage, self:provider.stage}-refurbished-products
          rate: cron(00 6 ? * MON-SUN *)
          enabled: false
          input:
            CheckRefurbished:
              store: it
              products:
                - ipad
                - iphone
      - schedule:
          name: ${self:service}-${opt:stage, self:provider.stage}-download-ifq
          rate: cron(0 4 * * ? *)
          enabled: true
          input:
            DownloadIFQ:
              when: today

resources:
  Resources:
    CommandTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.CommandsTopicName}
